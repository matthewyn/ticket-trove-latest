generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type BookingsOrderHistory {
  id              String   @map("_id") @db.ObjectId
  status          String
  transactionTime DateTime @db.Date
}

type MoviesCast {
  character String
  name      String
  profile   String
}

type PromosDiscount {
  type  String
  value Int
}

type ScreeningsAvailableSeats {
  available   String[]
  sold        String[]
  total       Int
  unavailable String[]
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  access_token      String
  expires_at        Int
  id_token          String
  provider          String
  providerAccountId String
  scope             String
  token_type        String
  type              String
  user              User   @relation(fields: [userId], references: [id])
  userId            String @db.ObjectId

  @@unique([provider, providerAccountId])
}

model Booking {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime               @db.Date @default(now())
  screening     Screening              @relation(fields: [screeningId], references: [id])
  screeningId   String                 @db.ObjectId
  seatsBooked   String[]
  totalAmount   Int
  user          User                   @relation(fields: [userId], references: [id])
  userId        String                 @db.ObjectId
  paid          Boolean                @default(true)
}

model Movie {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  cast            MoviesCast[]
  certification   String?
  genres          String[]
  mediaKey        String[]
  poster          String
  ratingsAverage  Float
  ratingsQuantity Int
  runtime         Int
  slug            String
  summary         String
  title           String       @unique
  Screening       Screening[]
}

model Promo {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  description String
  discount    PromosDiscount
  endDate     DateTime       @db.Date
  name        String
  startDate   DateTime       @db.Date
}

model Screening {
  id             String                   @id @default(auto()) @map("_id") @db.ObjectId
  availableSeats ScreeningsAvailableSeats
  endTime        DateTime                 @db.Date
  movie          Movie                    @relation(fields: [movieId], references: [id])
  movieId        String                   @db.ObjectId
  studio         Studio                   @relation(fields: [studioId], references: [id])
  studioId       String                   @db.ObjectId
  startTime      DateTime                 @db.Date
  Booking        Booking[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  expires      DateTime @db.Date
}

model Studio {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  capacity  Int
  name      String      @unique
  price     Int
  type      String
  Screening Screening[]
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  emailVerified DateTime?
  image         String?
  name          String
  bio           String?
  password      String?
  accounts      Account[]
  Booking       Booking[]
  sessions      Session[]
}
